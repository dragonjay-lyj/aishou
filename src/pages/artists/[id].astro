---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { ArtistProfile } from '../../components/ArtistProfile';
import { WorksList } from '../../components/WorksList';
import { Button } from "@nextui-org/button";

// 启用预渲染
export const prerender = true;

// src/pages/artists/[id].astro
export async function getStaticPaths() {
  const artistEntries = await getCollection('artists');
  const worksEntries = await getCollection('works');

  return artistEntries.map(artistEntry => {
    // 处理艺术家ID
    const artistId = artistEntry.id.replace(/\.(mdx|md)$/, '');

    // 获取该艺术家的所有作品
    const artistWorks = worksEntries
      .filter(work => work.data.artistId === artistId)
      .map(work => {
        // 处理作品ID
        const workId = work.id.replace(`${artistId}/`, '').replace(/\.(mdx|md)$/, '');
        return {
          id: workId,  // 存储处理后的ID
          ...work.data,
        };
      });

    return {
      params: { id: artistId },
      props: { 
        artist: {
          id: artistId,  // 存储处理后的ID
          ...artistEntry.data,
          works: artistWorks,
        }
      },
    };
  });
}


const { artist } = Astro.props;

const stats = {
  totalWorks: artist.works.length,
  totalLikes: artist.works.reduce((sum, work) => sum + (work.likes || 0), 0),
  totalViews: artist.works.reduce((sum, work) => sum + (work.views || 0), 0),
  platforms: Object.entries(
    artist.works.reduce((acc, work) => {
      acc[work.platform] = (acc[work.platform] || 0) + 1;
      return acc;
    }, {} as Record<string, number>)
  ).sort((a, b) => b[1] - a[1]),
};

// 错误处理
if (!artist) {
  return new Response('Artist not found', { status: 404 });
}
---

<Layout 
  title={`${artist.name} - Artist Profile`}
  description={artist.description}
>
  <main class="min-h-screen bg-gradient-to-b from-background to-background-100">
    {/* 页面头部 */}
    <div class="relative">
      <div class="absolute inset-0 overflow-hidden">
        <img
          src={artist.background}
          alt="Background"
          class="w-full h-full object-cover opacity-30 blur-sm"
        />
        <div class="absolute inset-0 bg-gradient-to-b from-background/80 to-background"></div>
      </div>

      <div class="relative container mx-auto px-4 py-8">
        <div class="md:flex-row gap-8 items-start">
          <ArtistProfile client:load artist={artist} />

    {/* 作品列表 */}
    <div class="container mx-auto px-4 py-8">
      <WorksList client:load works={artist.works} />
    </div>

    {/* 返回顶部按钮 */}
    <Button
      isIconOnly
      className="fixed bottom-6 right-6 bg-primary/80 backdrop-blur-lg shadow-lg hover:scale-110 transition-transform"
      onPress={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
      client:load
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18" />
      </svg>
    </Button>
  </main>
</Layout>